前提摘要：
在面向对象程序设计过程中，经常遇到这样的情况：设计一个系统时知道算法所需要的关键步骤，而确定了这些步骤的基本顺序
但一些具体步骤的实施还未知，或者说某些步骤的实现环节未知
定义：
定义好一个操作算法的骨架，算法的一些步骤延迟的子类中，使得子类可以不改变该算法结构的情况下重新定义该算法的某些特定步骤
举例：
去办业务都有这样的操作：取号，排队，办理具体业务，评价，其中取号，排队，评价都是必须要做的操作，而办理具体业务要根据人的不同而定
但顺序都是一样的，因此使用模板方法模式，将顺序都写入父类中不可以更改，可能会发生变化的类操作使用抽象的方法

案例：炒菜的案例
优点：
提高了代码的复用性
将相同部分的代码放在抽象的父类中，而将不同的代码放入不同的子类中
实现了反向控制：通过一个父类调用子类的操作，通过子类的具体实现扩展不同的行为，实现方向控制，并符合开闭原则
缺点：
对每个不同的实现都需要定义一个子类，会导致类的个数增加，设计更加抽象（问题不大）
父类中的抽象由子类实现，子类的执行的结果会影响父类的结果，导致一种反向的控制结构，提高了代码的阅读难度
使用场景：
算法的整体步骤固定，但是个别会改变，这个时候可以使用模板方法模式
需要通过子类来决定父类算法总某个步骤是否执行，实现子类对父类的方向控制

