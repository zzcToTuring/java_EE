定义：
运用共享技术来有效的支持大量对象的复用
通过共享已经存在的对象来大幅度减少需要创建的对象数量，避免大量相似对象的开销，从而提高资源利用率
优点：
极大减少了内存中相似或者相同的对象数量，节约系统资源，提供系统性能
享元模式中的外部状态相互独立，且不互相影响
缺点：
为了使对象可以共享，需要将享元对象的部门状态外部化，分离内部状态和外部状态，使得程序逻辑复杂
使用场景：
一个系统中有大量相同或者相似的对象，造成内存的大量耗费
对象的大部分状态都可以外部化，可以这些外部状态传入对象中
使用享元模式需要维护一个存储对象的享元池，而这需要耗费一定的系统资源，因此，应当在需要多次利用享元对象时候才值得利用享元模式

理解：
比如共享单车的例子，要是很多人都买单车的话，会造成单车数量多，因此出了共享单车，只在自己需要的时候骑车，实现共享
在这个例子中我们可以知道：
俄罗斯方块有OLJ形状，但每个形状的颜色都是不一样的，要是每个颜色都写一个类，那么就会造成类爆炸的情况
那么就写好OJL三个类和颜色类，进行共享，实现缩小类的作用