定义:
指在不改变现有对象结构的情况下，动态地给该对象增加一些职责（即增加其额外功能)的模式。
比如快餐店有炒饭和炒面两种，现在需要添加加蛋和培根两个方法
计算他们的总价，可使用装饰者模式，添加相关的方法，如garnish

结构
抽象构建：定义一个抽象接口以规范准备接收附加责任的对象
具体构建：实现抽象构件，通过装饰角色为其添加一些职责
抽象装饰（Decorator)角色︰继承或实现抽象构件，并包含具体构件的实例，可以通过其子类扩展具体构件的功能
具体装饰(concreteDecorator)角色︰实现抽象装饰的相关方法，并给具体构件对象添加附加的责任。

好处
饰者模式可以带来比继承更加灵活性的扩展功能，使用更加方便
可以通过组合不同的装饰者对象来获取具有不同行为状态的多样化的结果。
装饰者模式比继承更具良好的扩展性，完美的遵循开闭原则
继承是静态的附加责任，装饰者则是动态的附加责任

使用场景
当不能采用继承的方式对系统进行扩充或者采用继承不利于系统扩展和维护时

