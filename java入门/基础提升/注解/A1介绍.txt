1、注解
    annotation，jdk1.5的新特性
    注解的作用：对我们的程序进行标注，通过注解给类增加额外的信息

2、注解与注释
    共同点：都可以对程序进行解释说明。
    不同点：注释，是给程序员看的。只在Java中有效。在class文件中不存在注释的，当编译之后，会进行注释擦除
          注解，是给虚拟机看的。当虚拟机看到注解之后，就知道要做什么事情了。

3、在javaSE中(无其他框架支持)所认识的注解
    @Override:表示方法的重写
    @Deprecated:表示修饰的方法已经过时(idea会展示一条线)
    @SuppressWarning("all"):压制警告

4、自定义注解
    目前属于了解阶段，单独存在没有什么实际意义，一般和反射结合，或者直接使用开发好的框架中的相关注解
    格式：
        public @interface 注解名{
            public 属性名称 属性名() default 默认值;
        }
        default可省略，属性名称可以为:基本数据类型，string，class，注解，枚举，和他们的一维数组
    特殊属性：
        value 如果注解只有一个value属性的情况下，在使用注解的时候可以省略注解名

5、元注解
    写在注解上面的注解
    在自定义注解时候，需要对其有一点限制，我们可以在定义时对其有点限制
    @Target：约束自定义注解只能在哪些地方使用
        ElementType.TYPE --->类，接口
                   .FIELD ---> 成员变量
                   .METHOD ---> 成员方法
                   .PARAMETER ---> 方法参数
                   .CONSTRUCTOR ---> 构造器
                   .LOCAL_VARIABLE ---> 局部变量
    @Retention:声明注解的生命周期
        RetentionPolicy.SOURCE:注解只做用于源码阶段，生成的字节码文件中不存在
                       .CLASS:注解作用于源码阶段，字节码文件阶段，运行阶段不存在(默认值)
                       .RUNTIME:注解作用在源码阶段，字节码文件阶段，运行阶段(开发常用)
