1、xml是什么？
    XML的全称为(Extensible Markup Language)，是一种可扩展的标记语言，用来存储配置文件的一种文本格式
    优点：易于阅读，可以配置成组出现的数据
    作用：用于进行存储数据和传输数据；作为软件的配置文件

2、xml的特殊字符的处理
    注释 <!--注释内容-->
    特殊字符：
        &lt; < 小于
        &gt; > 大于
        &amp; & 和号
        &apos; ' 单引号
        &quot; " 引号
    CDATA区 <![CDATA[ 内容 ]]> 其中所有内容都会被当做文本来解析

3、xml解析
    SAX：
        不会把整体的xml文件夹在到内存，而是从上而下解析
        缺点：只能读取，不能修改
        优点：不需要把整体文件加入内存，可以解析较大的配置文件
    DOM（常用）：
        会把整体的xml文件都加入内存，形成树形结构，通过树形结构对文件解析
        优点：可以读取与修改
        缺点：不能读取较大的xml文件

4、DOM解析对象模型
    document对象：整个xml文档
    element对象：标签
    attribute对象：属性
    Text对象：文本内容
    （其中 element，attribute，Text称为 node对象）

5、dom4j使用：
    下载路径：https://dom4j.github.io/

6、基础方法
    1--SAXReader类
        public SAXReader() 创建dom4j的解析器对象
        SAXReader.read() 加载XML文件成为document对象

    2--获取根节点
        read.getRootElement()

    3--元素方法
        List<Element> elements()    得到当前元素下所有子元素
        List<Element> elements(String name)   得到当前元素下名为name的所有子元素
        Element element(String name)   得到当前元素下指定名字的子元素，如果有多个取第一个
        String getName()   得到元素的名字
        String attributeValue(String name)  通过属性名得到标签的某个属性值
        String elementText(子元素名)
        String getText()   得到元素的文本信息

7、Xpath检索方式
    介绍：
        使用dom4j的方式解析，对多层结构不太友好；Xpath咋解析xml文件方面提供了独特的路径，使得其更加优雅与高效
    比较：
        dom4j需要进行文件的全部分析，然后在进行数据查找操作
        Xpath技术更加适合做信息检索，可以直接查询到想要的信息
    使用:
        在需要dom4j的基础下，也需要jaxen.jar依赖进行解析
    相关方法：
        Node selectSingleNode("表达式")  获取符合表达式的唯一元素
        List<Node> selectNodes("表达式")  获取符合表达式的元素集合

1--绝对路径
    /根元素/子元素/孙元素....

2--相对路径(了解)
    ./子元素/孙元素  从当前元素开始，一级一级往下找，不能跨级

3--全文检索
    //contact  查找contact元素，无论元素在哪
    //contact/name   找contact元素，无论哪一级，但是name一定是contact的子节点
    //contact//name  contact无论在哪一层，name只要是contact的子、孙结点都能找到

4--属性查找
    @属性名  查找属性对象，无论是哪个元素，只要有这个属性即可
    //元素[@属性名]  查找元素对象，全文搜索指定元素名和属性名
    //元素[@属性名=“xxx”]  查找元素对象，指定属性名与值

PS:
    1、返回的是node对象，没有dom4j的相关属性，也不能在进行检索
    2、简单来说 /表示子 //表示子、孙等 @表示查找的此层结构中的属性值，要注意各层结构的关系

