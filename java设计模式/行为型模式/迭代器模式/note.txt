定义：
提供一个对象来顺序访问聚合对象中的一系列数据，而不暴露聚合对象的内部表示

结构:
抽象聚合角色：定义存储，添加、删除聚合元素以及创建迭代器对象的接口
具体聚合角色：实现抽象聚合类，返回一个具体迭代器的实例
抽象迭代角色：定义访问和遍历聚合元素的接口，通常包括hasnext(是否还有元素)，next（获取下一个元素）等方法
具体迭代角色：实现抽象迭代器中接口所定义的方法，完成对聚合对象的遍历，记录遍历的当前位置

优点:
它支持不用的方式遍历一个聚合对象（自己定义），在同一个聚合对象上可以定义多种遍历方式，在迭代器模式中
只需要用一个不同的迭代器来替代原有迭代器即可改变遍历算法，我也可以定义自己的迭代器的子类支持新的遍历方式

迭代器简化了聚合类。由于引入了迭代器，在原有的聚合对象中不需要再自行提供数据遍历等方法，这样可以简化聚合类设计

在迭代器模式中，由于引入了抽象层，增加新的聚合类和迭代器都很方便，无需修改原有代码，满足“开闭原则”的要求

缺点：增加了类的个数，增加系统的复杂性（问题不大）

使用场景：
1、当需要为聚合对象提供多种遍历方式时
2、但需要为遍历不同的聚合结构提供一个统一的接口时
3、当访问一个聚合对象的内容而无需暴露其内部细节的表示时
