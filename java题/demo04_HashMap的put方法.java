public class demo04_HashMap的put方法 {
    public static void main(String[] args) {
        /*
         *1.7版本和1.8版本的HashMap构成不同
         * 1.7版本HashMap由数组，链表构成
         * 1.8版本HashMap由数组，链表和红黑树构成
         * 由HashMap的put方法大致流程是：
         * 1、根据key通过哈希算法与与算法运算得出数组下标
         * 2、如果数组下标位置元素为空，则将key和value封装为entry对象
         * （1.7版本是entry对象，1.8版本是node对象）
         * 并且放入该位置
         * 3、如果数组下标的位置元素不为空，要分情况讨论
         */

 /*
 情况一：在JDK1.7版本中
 需要先判断是否需要扩容，如果需要扩容的话则进行扩容操作，如果不扩容的话，需要生成entry对象，并使用头插法添加到相应的链表中
*/

/*
    情况二： 在JDK1.8版本中
    首先先会判断当前位置上的node类型，是红黑树node，还是链表node
    要是是红黑树node
    将key和value封装成一个红黑树结点并添加到红黑树中去，这个过程会判断红黑树中是否存在当前key，要是存在则进行更新操作
    要是位置上的node对象是链表
    则将key和value封装成一个链表node并通过尾插法插入到链表的最后位置去，因为尾插法需要遍历，在遍历的时候会判断是否存在当前key
    如果存在这样的key将进行更新操作；当遍历完链表后，将新的链表node插入到链表中，插入链表后，会看当前的链表的个数
    如果大于等于8，那么则会将链表转换成红黑树

    将key和value封装成node插入到链表或红黑树后，再判断是否需要进行扩容
    如果需要扩容，进行扩容；不需要扩容，结束put方法
*/

    }
}
